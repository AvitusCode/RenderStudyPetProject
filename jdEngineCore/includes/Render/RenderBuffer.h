#pragma once
#include <glad/glad.h>
#include <vector>

class RenderBuffer
{
public:
    RenderBuffer() = default;
    /**
     * Creates new renderbuffer with given internal format, width and height. To see supported internal formats,
     * open following link:
     *
     * https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/glRenderbufferStorage.xhtml
     *
     * @param internalFormat  Internal format used
     * @param width           Renderbuffer height (in pixels)
     * @param height          Renderbuffer height (in pixels)
     *
     * @return True if renderbuffer has been  created successfully or false otherwise.
     */
    bool create(GLenum internalFormat, GLsizei width, GLsizei height);
    bool resize(GLsizei newWidth, GLsizei newHeight);
    GLuint getID() const;
    GLenum getInternalFormat() const;
    GLsizei getWidth() const;
    GLsizei getHeight() const;
    GLint getDepthBits();
    GLint getStencilBits();
    void deleteRenderBuffer() noexcept;

    ~RenderBuffer() noexcept;
private:
    GLuint m_renderBufferID{ 0 }; // ID of the renderbuffer generated by OpenGL
    GLenum m_internalFormat{ 0 }; // Internal format selected during creation
    GLsizei m_width{ 0 };         // Width of the renderbuffer
    GLsizei m_height{ 0 };        // Height of the renderbuffer

    GLint m_depthBits{ -1 };     // Cached number of bits for depth
    GLint m_stencilBits{ -1 };   // Cached number of bits for stencil
};